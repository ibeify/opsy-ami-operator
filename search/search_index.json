{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Opsy AMI Operator","text":"<p>The Opsy AMI Operator is a Kubernetes controller designed to streamline and automate the lifecycle management of Amazon Machine Images (AMIs) for AWS-based Kubernetes clusters. This tool seamlessly integrates with both managed Amazon EKS clusters and self-managed Kubernetes environments on AWS (TBD).</p> <p>Features and Benefits</p> <p>Key features include:</p> <ul> <li> <p>Automated AMI Building: Leverages HashiCorp Packer to create custom, up-to-date AMIs tailored to your specific requirements.</p> </li> <li> <p>Instance Refresh Management: Refreshes instances within your Kubernetes node groups, ensuring your cluster always runs on the latest AMI.</p> </li> <li> <p>Lifecycle Automation: Manages the entire AMI lifecycle, from creation and deployment to retirement, reducing manual intervention and potential human errors.</p> </li> <li> <p>Kubernetes-Native Approach: Operates as a set of Kubernetes controllers, allowing for seamless integration with your existing Kubernetes workflows and GitOps practices.</p> </li> </ul>"},{"location":"ami-refresher/","title":"AMIRefresher","text":"<p>The AMIRefresher is a Custom Resource Definition (CRD) that automates the process of updating and refreshing Amazon EKS node groups with the latest Amazon Machine Images (AMIs).</p>"},{"location":"ami-refresher/#overview","title":"Overview","text":"<p>The AMIRefresher controller automates the AMI update process for Amazon EKS node groups. It manages launch template updates and triggers instance refreshes, ensuring your Kubernetes cluster consistently runs on the latest, most secure Amazon Machine Images (AMIs).</p>"},{"location":"ami-refresher/#key-components","title":"Key Components","text":""},{"location":"ami-refresher/#ami-selection","title":"AMI Selection","text":"<ul> <li>Can use a specific AMI ID or discover AMIs using filters</li> <li>Managed AMIs are tagged with metadata like creation timestamp and base AMI ID</li> <li>Only non-expired, active AMIs are eligible for deployment</li> </ul>"},{"location":"ami-refresher/#ami-validation","title":"AMI Validation","text":"<ul> <li>Checks for the <code>status: active</code> tag</li> <li>Verifies the AMI has not expired</li> <li>Ensures only one valid AMI per AMIRefresher instance</li> </ul>"},{"location":"ami-refresher/#node-group-management","title":"Node Group Management","text":"<ul> <li>Updates launch templates for node groups in the cluster</li> <li>Initiates instance refresh processes</li> <li>Allows exclusion of specific node groups</li> </ul>"},{"location":"ami-refresher/#amirefresher-specification","title":"AMIRefresher Specification","text":"<pre><code>apiVersion: ami.refresh.ops/v1alpha1\nkind: AMIRefresher\nmetadata:\n  name: node-group-ami-refresh\n  labels:\n    app.kubernetes.io/name: amirefresher\n    app.kubernetes.io/instance: amirefresher-sample\n    app.kubernetes.io/part-of: opsy-ami-operator\n    app.kubernetes.io/managed-by: kustomize\n    app.kubernetes.io/created-by: opsy-ami-operator\nspec:\n  region: \"us-west-2\"\n  amiFilters:\n    - name: \"name\"\n      values: [\"amazon-eks-node-al2023-x86_64-standard-1.30*\"]\n    - name: \"owner-id\"\n      values: [\"602401143452\"]\n  clusterName: \"ibeify-gitops\"\n  expiresIn: \"5m\" # 1h, 1d, 1w, 1m, 3m, 6m, 1y\n  exclude:\n    - \"ingress-dev\"\n</code></pre>"},{"location":"ami-refresher/#key-fields-explained","title":"Key Fields Explained","text":"<ul> <li><code>region</code>: AWS region where the EKS cluster is located</li> <li><code>amiFilters</code>: Criteria for selecting the appropriate AMI</li> <li>Can filter by AMI name, owner ID, or other attributes</li> <li><code>clusterName</code>: Name of the EKS cluster to manage</li> <li><code>expiresIn</code>: Time duration after which the AMI is considered expired</li> <li>Supports various time units (e.g., minutes, hours, days, weeks, months, years)</li> <li><code>exclude</code>: List of node groups to exclude from the refresh process</li> </ul>"},{"location":"ami-refresher/#ami-selection-process","title":"AMI Selection Process","text":"<ul> <li>The controller first checks if a specific AMI ID is provided in the spec</li> <li>If not, it uses the provided filters to discover a suitable AMI</li> <li>Validates the AMI:</li> <li>Checks for the <code>status: active</code> tag</li> <li>Ensures the AMI has not expired based on the <code>expiresIn</code> setting</li> <li>If a valid AMI is found, it's used to update the launch templates</li> </ul>"},{"location":"ami-refresher/#node-group-refresh-process","title":"Node Group Refresh Process","text":"<ul> <li>Identifies all node groups in the specified cluster</li> <li>Excludes any node groups listed in the <code>exclude</code> field</li> <li>Updates the launch template for each eligible node group with the new AMI ID</li> <li>Initiates an instance refresh process for each updated node group</li> </ul>"},{"location":"deployment/","title":"Installation Guide","text":"<p>This guide will walk you through the process of installing the Opsy AMI Operator in your Kubernetes cluster.</p>"},{"location":"deployment/#prerequisites","title":"Prerequisites","text":"<p>Before starting the installation, ensure you have the following:</p> <ul> <li>A running Kubernetes cluster (EKS recommended)</li> <li><code>kubectl</code> configured to communicate with your cluster</li> <li>Helm v3 installed</li> <li>AWS CLI configured with appropriate permissions</li> <li>Git installed (for cloning the repository)</li> </ul>"},{"location":"deployment/#installation","title":"Installation","text":"<ul> <li> <p>Configure IRSA for controller (IAM Roles for Service Accounts)</p> <p>Create an IAM role for the operator and associate it with a Kubernetes service account: <pre><code>export ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)\nexport OIDC_PROVIDER=$(aws eks describe-cluster --name YOUR_CLUSTER_NAME --query \"cluster.identity.oidc.issuer\" --output text | sed -e \"s/^https:\\/\\///\")\n\n# Create IAM role\naws iam create-role --role-name opsy-ami-operator-role --assume-role-policy-document file://trust-relationship.json\n\n# Attach necessary policies (adjust as needed)\naws iam attach-role-policy --role-name opsy-ami-operator-role --policy-arn arn:aws:iam::aws:policy/AmazonEC2FullAccess\n\n# Create Kubernetes service account\nkubectl create serviceaccount opsy-ami-operator -n $NAMESPACE\n\n# Annotate the service account with the IAM role ARN\nkubectl annotate serviceaccount opsy-ami-operator -n $NAMESPACE eks.amazonaws.com/role-arn=arn:aws:iam::${ACCOUNT_ID}:role/opsy-ami-operator-role\n</code></pre> <code>NOTE</code>: You can use hardcoded AWS creds, by passing them in as env variables.Just supply secrets name in <code>PackerBuilder.Spec.Builder.Secrets</code></p> </li> <li> <p>Build and push your image to the location specified by <code>IMG</code>:</p> <p><pre><code>make docker-build docker-push IMG=&lt;some-registry&gt;/opsy-ami-operator:tag\n</code></pre> NOTE: This image ought to be published in the personal registry you specified.   And it is required to have access to pull the image from the working environment.   Make sure you have the proper permission to the registry if the above commands don\u2019t work.</p> </li> <li> <p>Install with Helm <pre><code>  \u276f helm repo add opsy-ami-operator https://ibeify.github.io/opsy-ami-operator\n  \u276f helm repo update\n  \u276f helm upgrade --install opsy-ami opsy-ami-operator/opsy-ami-operator --version 1.7.0 \\\n    --namespace opsy --create-namespace \\\n    --set controllerManager.manager.image.repository=&lt;repository&gt; \\\n    --set controllerManager.manager.image.tag=&lt;version&gt; \\\n    --set-json 'controllerManager.serviceAccount.annotations={\"eks.amazonaws.com/role-arn\": \"arn:aws:iam::012345678910:role/eks-packer-builder\"}'\n</code></pre></p> </li> <li> <p>Configure IRSA Role for the packer jobs.   See IAM Policy details  <pre><code>  apiVersion: v1\n  kind: ServiceAccount\n  metadata:\n  name: eks-ami-builder\n  namespace: default\n  annotations:\n      eks.amazonaws.com/role-arn: arn:aws:iam::012345678910:role/eks-packer-builder\n</code></pre></p> </li> <li> <p>Configure GitSync Secrets</p> </li> </ul> <p>This project uses git-sync to pull repos for the packer job. You'll need to provide credentials to access your private repos.Below is a simple example for github tokens. More on this can be found in the manual <pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n  name: git-credentials\ntype: Opaque\ndata:\n  username: $USERNAME\n  token: $TOKEN\n</code></pre> - Create PackerBuilder and AMIRefresher Resources <pre><code># Example\nkubectl apply -f config/samples/packerbuilder_sample.yaml\nkubectl apply -f config/samples/amirefresher_sample.yaml\n</code></pre></p>"},{"location":"deployment/#troubleshooting","title":"Troubleshooting","text":"<ul> <li> <p>If pods fail to start, check the logs:   <pre><code>kubectl logs -n  $NAMESPACE deployment/opsy-ami-operator\n</code></pre></p> </li> <li> <p>Ensure IAM roles and policies are correctly set up</p> </li> <li>Verify that your cluster has the necessary permissions to pull images and create resources</li> <li>Ensure you have provided credentials for github access.</li> </ul>"},{"location":"deployment/#upgrading","title":"Upgrading","text":"<p>To upgrade the operator, update the image tag in your <code>values.yaml</code> and run the Helm upgrade command:</p> <pre><code>\u276f helm upgrade --install opsy-ami opsy-ami-operator/opsy-ami-operator --version 1.7.0 \\\n  --namespace opsy --create-namespace \\\n  --set controllerManager.manager.image.repository=&lt;repository&gt; \\\n  --set controllerManager.manager.image.tag=&lt;version&gt; \\\n  --set-json 'controllerManager.serviceAccount.annotations={\"eks.amazonaws.com/role-arn\": \"arn:aws:iam::012345678910:role/eks-packer-builder\"}'\n</code></pre>"},{"location":"deployment/#uninstallation","title":"Uninstallation","text":"<p>To remove the Opsy AMI Operator:</p> <pre><code>helm uninstall opsy-ami-operator -n $NAMESPACE\nkubectl delete crd amirefreshers.ami.opsy.dev\nkubetcl delete crd packerbuilders.ami.opsy.dev\n</code></pre>"},{"location":"how-it-works/","title":"How It Works","text":""},{"location":"how-it-works/#design","title":"Design","text":"<p>Reconciliation based on Filtered Base AMI</p> <p>The Opsy AMI Operator automates the process of building and refreshing Amazon Machine Images (AMIs) for Amazon EKS node groups. It consists of two primary components:</p> <ol> <li>AMI Building Using Packer</li> <li>Node Group AMI Instance Refreshing</li> </ol>"},{"location":"how-it-works/#ami-building-using-packer","title":"AMI Building Using Packer","text":"<p>This component is managed by the <code>PackerBuilder</code> Custom Resource Definition (CRD).</p> <p>Key features:</p> <ul> <li>Automatically checks for the latest AMI using provided filters</li> <li>Creates and monitors Kubernetes jobs for AMI building using Packer</li> <li>Ensures node groups use a <code>status:active</code> tagged AMI when under management</li> <li>Uses Git-sync to pull Packer configurations from a public or private git repository</li> <li>Supports notifications (currently Slack, with plans for SNS, SES, and Discord)</li> <li>Can adopt previously created AMIs that meet specific criteria</li> </ul> <p>Process:</p> <ul> <li>Checks if an AMI with appropriate tags exists and is NOT expired.</li> <li>If not, initiates a Packer build job in Kubernetes</li> <li>Monitors the build process and updates the <code>PackerBuilder</code> status</li> <li>Tags the resulting AMI with metadata (creation time, status, build ID, etc.)</li> <li> <p>Attempts to clean up any lingering artifacts such as security groups and keypairs</p> </li> <li> <p>Supports custom Packer commands and working directories</p> </li> </ul>"},{"location":"how-it-works/#node-group-ami-instance-refreshing","title":"Node Group AMI Instance Refreshing","text":"<p>This component is managed by the <code>AMIRefresher</code> CRD.</p> <p>Key features:</p> <ul> <li>Looks for an AMI either by ID or using filters</li> <li>Updates the launch template of node groups in the cluster</li> <li>Initiates instance refresh for node groups</li> <li>Allows exclusion of specific node groups</li> <li>Ensures only non-expired, active AMIs are used</li> </ul> <p>Process:</p> <ol> <li>Identifies a suitable AMI (either specified directly or via filters)</li> <li>Verifies the AMI is tagged as active and not expired</li> <li>Updates the launch template for eligible node groups</li> <li>Initiates an instance refresh for updated node groups</li> </ol>"},{"location":"how-it-works/#general-functionality","title":"General Functionality","text":"<ul> <li>Both components can work independently or together, one hand washes the other both wash the face.</li> <li>Uses custom resource definitions (CRDs) for configuration. Events, Conditions, Statuses using <code>kubectl</code>, slack notifications. You're going to know if you broke something immediately</li> <li>Supports various timeouts and expiration settings</li> <li>Provides detailed status information in the CRD objects</li> <li>Requires specific IAM roles and permissions to function properly</li> </ul>"},{"location":"packer-builder-cis-lvl2-al-2023/","title":"AL2023 CIS LVL2","text":""},{"location":"packer-builder-cis-lvl2-al-2023/#using-ansible-lock-down-for-cis-lvl-2-hardened-al2023","title":"Using Ansible-Lock-Down for CIS lvl 2 Hardened AL2023","text":"<pre><code>apiVersion: ami.opsy.dev/v1alpha1\nkind: PackerBuilder\nmetadata:\n  labels:\n  name: packer-builder-cis-lvl2-al-2023\nspec:\n  amiFilters:\n    - name: \"name\"\n      values: [\"amazon-eks-node-al2023-x86_64-standard-1.30*\"]\n    - name: \"owner-id\"\n      values: [\"602401143452\"]\n  clusterName: \"opsy-gitops\"\n  timeOuts:\n    expiresIn: \"2h\"\n    controllerTimer: \"2m\"\n  notifier:\n    slack:\n      channelIDs: [\"C055ZJPM2QN\"]\n      secret: \"slack-token\"\n  gitSync:\n    image: \"registry.k8s.io/git-sync/git-sync:v4.2.3\"\n    name: \"git-sync\"\n    secret: \"git-sync\"\n  region: \"us-west-2\"\n  builder:\n    repoURL: \"https://github.com/ibeify/opsy-ami-operator\"\n    branch: \"main\"\n    image: \"hashicorp/packer:latest\"\n    dir: \"packer/al2023-cis-lvl2\"\n    commands:\n      - subCommand: \"build\"\n        workingDir: \"packer/al2023-cis-lvl2\"\n      - subCommand: \"init\"\n        args:\n          - \"-upgrade\"\n        workingDir: \"packer/al2023-cis-lvl2\"\n      - subCommand: \"validate\"\n        args:\n        workingDir: \"packer/al2023-cis-lvl2\"\n</code></pre>"},{"location":"packer-builder-private/","title":"Private Repository","text":""},{"location":"packer-builder-private/#basic-example","title":"Basic Example","text":"<pre><code>apiVersion: ami.opsy.dev/v1alpha1\nkind: PackerBuilder\nmetadata:\n  labels:\n  name: packer-builder-example\nspec:\n  amiFilters:\n    - name: \"name\"\n      values: [\"amazon-eks-node-al2023-x86_64-standard-1.30*\"]\n    - name: \"owner-id\"\n      values: [\"602401143452\"]\n  clusterName: \"opsy-gitops\"\n  timeOuts:\n    expiresIn: \"48h\"\n    controllerTimer: \"5m\"\n  gitSync:\n    image: \"registry.k8s.io/git-sync/git-sync:v4.2.3\"\n    name: \"git-sync\"\n    secret: \"git-sync\"\n  region: \"us-west-2\"\n  builder:\n    repoURL: \"https://github.com/ibeify/eks-node-group-ami-refresh\"\n    branch: \"main\"\n    image: \"hashicorp/packer:latest\"\n    dir: \"packer/generic-fips\"\n    secret: \"aws-creds\"\n    commands:\n      - subCommand: \"build\"\n        args:\n          - \"-force\"\n        color: false\n        debug: true\n        onError: \"cleanup\"\n</code></pre>"},{"location":"packer-builder-public/","title":"Public Repository","text":""},{"location":"packer-builder-public/#packerbuilder","title":"PackerBuilder","text":""},{"location":"packer-builder-public/#sourcing-from-public-repository","title":"Sourcing from Public Repository","text":"<pre><code>apiVersion: ami.opsy.dev/v1alpha1\nkind: PackerBuilder\nmetadata:\n  labels:\n  name: packer-builder-remote\nspec:\n  clusterName: \"opsy-gitops\"\n  timeOuts:\n    expiresIn: \"1h\"\n    controllerTimer: \"5m\"\n  gitSync:\n    image: \"registry.k8s.io/git-sync/git-sync:v4.2.3\"\n    name: \"git-sync\"\n  region: \"us-west-2\"\n  builder:\n    repoURL: \"https://github.com/aws-samples/amazon-eks-custom-amis.git\"\n    branch: \"main\"\n    image: \"hashicorp/packer:latest\"\n    secret: \"aws-creds\" # Ensure If secrets not set IRSA is used\n    commands:\n      - subCommand: \"build\"\n        variablesFile: \"al2_amd64.pkrvars.hcl\"\n        variables:\n          eks_version: \"1.30\"\n          region: \"us-west-2\"\n        workingDir: \".\"\n      - subCommand: \"init\"\n        args:\n          - \"-upgrade\"\n        workingDir: \".\"\n      - subCommand: \"validate\"\n        args:\n        workingDir: \".\"\n</code></pre>"},{"location":"packer-builder/","title":"PackerBuilder","text":"<p>The PackerBuilder is a Custom Resource Definition (CRD) that automates the process of building Amazon Machine Images (AMIs) using HashiCorp Packer within a Kubernetes environment.</p>"},{"location":"packer-builder/#overview","title":"Overview","text":"<p>The packer-build-controller manages PackerBuilder resources, creating Kubernetes Jobs to run Packer builds. It only initiates a build when it detects that an AMI with the appropriate tags doesn't exist.</p>"},{"location":"packer-builder/#key-components","title":"Key Components","text":""},{"location":"packer-builder/#ami-tagging","title":"AMI Tagging","text":"<p>The controller uses specific tags to manage AMIs:</p> <ul> <li>Creation Timestamp: Indicates when the AMI was created</li> <li>Status: Set to \"active\" for usable AMIs</li> <li>Build ID: Links the AMI to its PackerBuilder instance</li> <li>Management Tags: Identify AMIs managed by this operator</li> </ul> <p>These tags prevent unnecessary rebuilds and maintain AMI lifecycle management.</p>"},{"location":"packer-builder/#base-ami-discovery","title":"Base AMI Discovery","text":"<ul> <li>Uses provided filters to find a base AMI</li> <li>Alternatively, you can run self-contained Packer projects without filters</li> </ul>"},{"location":"packer-builder/#packer-configuration","title":"Packer Configuration","text":"<ul> <li>Sourced from a Git repository (public or private)</li> <li>Uses git-sync to pull the repository</li> </ul>"},{"location":"packer-builder/#build-process","title":"Build Process","text":"<ul> <li>Can Adopt Existing AMI which meet all criteria</li> <li>Can discover running jobs in case of interrupted service.</li> <li>Configurable reconciliation schedule and AMI expiration</li> </ul>"},{"location":"packer-builder/#flexibility","title":"Flexibility","text":"<ul> <li>PackerBuilder can be used independently of the AMI refresh controller. PackerBuilder has on task and one task only, AMI production.</li> </ul>"},{"location":"packer-builder/#packerbuilder-specification","title":"PackerBuilder Specification","text":"<pre><code>apiVersion: ami.refresh.ops/v1alpha1\nkind: PackerBuilder\nmetadata:\n  name: packer-builder-local\nspec:\n  amiFilters:\n    - name: \"name\"\n      values: [\"amazon-eks-node-al2023-x86_64-standard-1.30*\"]\n    - name: \"owner-id\"\n      values: [\"602401143452\"]\n  clusterName: \"opsy-gitops\"\n  timeOuts:\n    expiresIn: \"48h\"\n    controllerTimer: \"5m\"\n  notifier:\n    slack:\n      channelIDs: [\"SLACK_CHANNEL_IDS\"]\n      secret: \"slack-token\"\n  gitSync:\n    image: \"registry.k8s.io/git-sync/git-sync:v4.2.3\"\n    name: \"git-sync\"\n    secret: \"git-sync\"\n  region: \"us-west-2\"\n  builder:\n    repoURL: \"https://github.com/ibeify/eks-node-group-ami-refresh\"\n    branch: \"main\"\n    image: \"hashicorp/packer:latest\"\n    dir: \"packer/generic-fips\"\n    secret: \"aws-creds\"\n    commands:\n      - subCommand: \"build\"\n        args:\n          - \"-force\"\n        color: false\n        debug: true\n        onError: \"cleanup\"\n</code></pre>"},{"location":"packer-builder/#status-reporting","title":"Status Reporting","text":"<p>The PackerBuilder resource maintains detailed status information:</p> <pre><code>status:\n  buildID: 728d7a64-ca85-42c9-9acd-60c681d4efe3\n  command: packer init -upgrade . &amp;&amp; packer validate . &amp;&amp; packer build -var 'eks_version=1.30' -var 'region=us-west-2' -var-file=al2_amd64.pkrvars.hcl -color=false .\n  conditions:\n    - lastTransitionTime: \"2024-09-01T18:05:40Z\"\n      message: Latest Created AMI ami-0d2587d8e405f376c has not expired and is active\n      reason: FlightCheckFailed\n      status: \"True\"\n      type: FlightCheckFailed\n  failedJobCount: 0\n  jobID: 3cb1b\n  jobName: packer-builder-remote-3cb1b\n  jobStatus: completed\n  lastRun: \"2024-09-01T18:30:48Z\"\n  lastRunBaseImageID: ami-05da30e98c637628c\n  lastRunBuiltImageID: ami-0d2587d8e405f376c\n  lastRunMessage: Reconciliation in progress\n  lastRunStatus: running\n</code></pre>"},{"location":"packer-builder/#packer-command-execution","title":"Packer Command Execution","text":"<p>Default command if none specified: <pre><code>packer init . &amp;&amp; packer validate . &amp;&amp; packer build -color=false .\n</code></pre></p> <p>The controller always executes in this order: <code>init</code>, <code>validate</code>, <code>build</code>.</p>"},{"location":"packer-builder/#notifications","title":"Notifications","text":"<p>Supports state transition notifications:</p> <ul> <li>Slack (implemented)</li> <li>SNS, SES, Discord (planned)</li> </ul>"},{"location":"packer-builder/#image-adoption","title":"Image Adoption","text":"<p>The controller can adopt existing AMIs that meet specific criteria:</p> <ul> <li>Has an \"active\" status tag</li> <li>Is not expired</li> <li>Contains required management tags</li> </ul> <p>Required tags for adoption: <pre><code>\"brought-to-you-by\":  \"opsy-the-ami-operator\"\n\"cluster-name\":       \"opsy-eks\"\n\"created-by\":         \"name-of-your-crd-instance\"\n\"packer-repo\":        \"repo-where-packer-code-was-sourced\"\n\"packer-repo-branch\": \"branchable-branch\"\n</code></pre></p>"},{"location":"packer-builder/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Kubernetes Cluster: A functional Kubernetes cluster to run the controller and its jobs.</p> </li> <li> <p>IRSA Role for Packer: An IAM Role for Service Accounts (IRSA) configured for Packer jobs.</p> <ul> <li> <p>See IAM Policy details</p> </li> <li> <p>Example ServiceAccount configuration:   <pre><code>apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: eks-ami-builder\n  namespace: default\n  annotations:\n    eks.amazonaws.com/role-arn: arn:aws:iam::012345678910:role/eks-packer-builder\n</code></pre></p> </li> </ul> </li> <li> <p>Git Repository Access: The project uses git-sync to pull repositories for Packer jobs.</p> <ul> <li>Example Secret for GitHub token:   <pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n  name: git-credentials\n  namespace: default  # Adjust namespace as needed\ntype: Opaque\ndata:\n  username: c2VjcmLTQ1Nzg5=\n  token: Y2hwZ0kxRDU5Q0VrVUtPZ0hzTEdjemFqeTM1UEJhYg==\n</code></pre>   For more details, refer to the git-sync manual</li> </ul> </li> <li> <p>Packer Configuration: Set <code>ami_id</code> and <code>region</code> as variables if you plan to use filters for finding the Base AMI.</p> <pre><code>Example:\n```hcl\nvariable \"ami_id\" {\n    type    = string\n    default = \"ami-0c2b8ca1dad447f8a\"\n}\n\nvariable \"region\" {\n    type    = string\n    default = \"us-east-1\"\n}\n```\n</code></pre> </li> </ul>"}]}