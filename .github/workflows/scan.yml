name: Vulnerability Scan
on:
  workflow_dispatch:
  schedule:
    - cron: "0 9 * * *"

permissions:
  contents: write
  id-token: write
  security-events: write

jobs:
  check_repo_visibility:
    runs-on: ubuntu-latest
    outputs:
      is_public: ${{ steps.check_visibility.outputs.is_public }}
    steps:
      - name: Check repository visibility
        id: check_visibility
        run: |
          REPO_VISIBILITY=$(curl -s -H "Authorization: token ${{ secrets.GH_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }} | jq -r .visibility)
          if [ "$REPO_VISIBILITY" = "public" ]; then
            echo "is_public=true" >> $GITHUB_OUTPUT
          else
            echo "is_public=false" >> $GITHUB_OUTPUT
          fi

  determine_versions:
    needs: check_repo_visibility
    if: needs.check_repo_visibility.outputs.is_public == 'true'
    runs-on: ubuntu-latest
    outputs:
      versions: ${{ steps.get_versions.outputs.versions }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get versions
        id: get_versions
        run: |
          VERSIONS=$(git tag --list 'v*.*.*' --sort=-version:refname | grep -v 'beta\|alpha' | head -n 3 | sed 's/^v//' | jq -R -s -c 'split("\n")[:-1]')
          echo "versions=$VERSIONS" >> $GITHUB_OUTPUT

  scan:
    needs: [check_repo_visibility, determine_versions]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: ${{ fromJson(needs.determine_versions.outputs.versions) }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ROLE_NAME }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHubActions-${{ github.run_id }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: "true"
      - name: Pull image from ECR
        run: |
          docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.REPOSITORY_NAME }}:${{ matrix.version }}
      - name: Run Trivy vulnerability scanner
        if: needs.check_repo_visibility.outputs.is_public == 'true'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.REPOSITORY_NAME }}:${{ matrix.version }}"
          format: "sarif"
          output: "trivy-results-${{ matrix.version }}.sarif"
          severity: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"
          vuln-type: "os,library"
      - name: Upload Trivy scan results to GitHub Security tab
        if: needs.check_repo_visibility.outputs.is_public == 'true'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results-${{ matrix.version }}.sarif"
      - name: Summarize vulnerabilities
        run: |
          COUNT=$(jq '.runs[0].results | length' trivy-results-${{ matrix.version }}.sarif)
          echo "Vulnerability scan summary for version ${{ matrix.version }}" >> $GITHUB_STEP_SUMMARY
          echo "Total vulnerabilities found: $COUNT" >> $GITHUB_STEP_SUMMARY

  scan_repo:
    needs: check_repo_visibility
    if: needs.check_repo_visibility.outputs.is_public == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          ignore-unfixed: true
          format: "sarif"
          output: "trivy-repo-results.sarif"
          severity: "CRITICAL,HIGH"
      - name: Upload Trivy repo scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-repo-results.sarif"
