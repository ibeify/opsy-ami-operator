name: Build-Push-Image
on:
  pull_request:
    types: [closed]
    branches:
      - "*"
    paths:
      - "cmd/**"
      - "api/**"
      - "internal/**/**"
      - "Dockerfile"

  push:
    branches:
      - main

    paths:
      - "cmd/**"
      - "api/**"
      - "internal/**/**"
      - "Dockerfile"
  workflow_dispatch: # This allows the workflow to be manually triggered
concurrency: production

jobs:
  build:
    name: Build-Push-Image
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: write

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: semantic-release/exec
        if: github.ref == 'refs/heads/main'
        run: |
          npm install --save-dev @semantic-release/exec

      - name: Semantic Release
        if: github.ref == 'refs/heads/main'
        uses: cycjimmy/semantic-release-action@v4
        id: semantic
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Extract version from semantic-release output
        id: extract_version
        run: |
          if [ -z "${{ steps.semantic.outputs.new_release_version }}" ]; then
            echo "VERSION=${{ github.sha }}" >> $GITHUB_ENV
          else
            echo "VERSION=${{ steps.semantic.outputs.new_release_version }}" >> $GITHUB_ENV
          fi

      - name: Configure AWS credentials

        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ROLE_NAME }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHubActions-${{ github.run_id }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: "true"

      - name: Get build date
        id: build-date
        run: echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REPOSITORY: ${{ secrets.REPOSITORY_NAME }}
          IMAGE_TAG: ${{ env.VERSION }}

        run: |
          make docker-build docker-push IMG=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.REPOSITORY_NAME }}:$IMAGE_TAG

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        env:
          REPOSITORY: ${{ secrets.REPOSITORY_NAME }}
          IMAGE_TAG: ${{ env.VERSION }}
        with:
          image-ref: "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.REPOSITORY_NAME }}:$IMAGE_TAG"
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          # output: "trivy-results-${{ matrix.version }}.sarif"
          severity: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"
          vuln-type: "os,library"
